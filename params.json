{
  "name": "Aho-photon-2016",
  "tagline": "Set up and examples for the particle photon",
  "body": "\r\n![Particle Logo][logo]\r\n\r\n[logo]: https://www-assets.particle.io/images/particle-mark.png \"Particle logo image\"\r\nParticle Setup\r\n==============\r\n\r\n##Associating the photon with your account\r\nThere are several ways of uploading code to your photon board, but the easiest is by using the online IDE provided. However, before we do this we first need to associate the board with our account. Again there are several ways of doing this, but the easiest is to use the Particle moblie app.\r\n\r\ndownload particle app for your phone from [iTunes](https://itunes.apple.com/us/app/particle-build-iot-projects/id991459054?mt=8), [google Play](https://play.google.com/store/apps/details?id=io.particle.android.app&hl=en) or [windows store](https://www.microsoft.com/en-us/store/p/particle/9nblggh4p55n)\r\n\r\n**Dont use an existing password** as we may need to make this password visable and unencrypted online at some point.\r\n\r\nCreate a user profile and sign in. \r\n\r\nOn the paged listed \"Your devices\" hit the + in the top right to add your new photon board. Select \"Photon\" from the options and follow the instructions. \r\n\r\nTo ensure you select the correct photon, the 4 digit code that shows as part of the wifi network name is the same as the 2nd set of digits in the serial number found on the side of the photon packet.\r\n\r\nSelect the WPA2 network rather than the eduroam network. Enter the password details and hopefully you will be informed that you were successfull. If not its likely the password was incorrect. You have the opetion here to name the device or can accept the random name and replace it later.\r\n\r\nNow that we have the photon associated with our account we want to check that we can control the board over the network. Select your new device and you will be shown an outline of the board. Tap D7 then digtialWrite. Tapping D7 again should switch the Pin on. It will read `HIGH` on the app and the onboard led on pin 7 on the associated photon will be lit. \r\n\r\n##Device Inspector\r\nTapping the inspect button in the top right takes us to the Device Inspector. Here we can call functions and see variables. The current code uploaded to the Photon by default is called tinker and there are no variables to view. However, once you upload your own code you can see the results here. You can also copy the ID of your photon using the ticked icon on the info page. \r\n\r\nTapping the 3 dots on the top right accesses a menu where you can re upload tinker or signal your device. This causes the central led to flash rainbows. This is useful if you are unsure which device is associated with your account. \r\n\r\n##Uploading code\r\nTo upload code we need to use the online [particle IDE](https://www.particle.io/) on out laptop. Click on the IDE button on the topright and sign in. \r\nHere you can find sample code, add libraries, save your code etc.\r\n\r\nWe will run through an example in class but I suggest you have a look through this info on the [particle site] (https://docs.particle.io/guide/getting-started/build/photon/#web-ide)\r\n\r\n##Adding Wifi networks\r\nYou can store a number of networks and passwords on the board and it will automatically connect to any known networks it can find. In order to introduce it to the new network you need the RGB led blinking blue. If it is not already push the setup button for 3 seconds. Then use your mobile app and run through the steps to add it as if you ware adding a new photon. The board will still remenber the school network as well. \r\n\r\n##Differences with Arduino Uno\r\nWhile many aspects of the photon are similar including the code, there are a few difference that we need to be aware of.\r\n\r\n* The Photon works on 3.3v rather than 5v as the arduino does. \r\n* Do not connect switches to the VIN pin as they may damage the switch pin.\r\n* The Analog pins are 10 bit and so read from 0-4095 rather than 0-1023\r\n* Remember not to publish data too often, otherwise you will get cut off from the particle server. So do not place `Particle.publish()` inside `void loop()`\r\n\r\n##Useful Links\r\n[particle reference](https://docs.particle.io/reference/firmware/photon/#cloud-functions)\r\n\r\n[indictation of the RGB meanings] (https://docs.particle.io/guide/getting-started/modes/photon/)\r\n\r\n[description of pins](https://docs.particle.io/datasheets/photon-datasheet/#pin-description)\r\n\r\n[online dashboard](http://jflasher.github.io/spark-helper/)\r\n\r\n[detailed tutorials, course notes and examples from CMU](http://daraghbyrne.github.io/diotlabs/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}